package logger

import "testing"

func TestStdLogger_SetLogLevel_Stdout(t *testing.T) {
	stdLogger := SetStdLogger("error", "stdout")
	t.Log("log level set at init on", stdLogger.(StdLogger).logOutput.String() ,"at :", stdLogger.GetLogLevel(), "level")
	Trace("Test std logger on StdOut :", "should not work on \"Trace\"")
	Debug("Test std logger on StdOut :", "should not work on \"Debug\"")
	Warning("Test std logger on StdOut :", "should not work on \"Warning\"")
	Error("Test std logger on StdOut :", "\"Error\" should work")
	SetLogLevel("warning")
	t.Log("a new log level set on ", stdLogger.(StdLogger).logOutput.String() ," after a change :", stdLogger.GetLogLevel())
	Trace("Test std logger on StdOut :", "should not work on \"Trace\"")
	Debug("Test std logger on StdOut :", "should not work on \"Debug\"")
	Warning("Test std logger on StdOut :", "\"Warning\" should work")
	Error("Test std logger on StdOut :", "\"Error\" should work")
	SetLogLevel("debug")
	t.Log("a new log level set on ", stdLogger.(StdLogger).logOutput.String() ," after a change :", stdLogger.GetLogLevel())
	Trace("Test std logger on StdOut :", "should not work on \"Trace\"")
	Debug("Test std logger on StdOut :", "\"Debug\" should work")
	Warning("Test std logger on StdOut :", "\"Warning\" should work")
	Error("Test std logger on StdOut :", "\"Error\" should work")
	SetLogLevel("trace")
	t.Log("a new log level set on ", stdLogger.(StdLogger).logOutput.String() ," after a change :", stdLogger.GetLogLevel())
	Trace("Test std logger on StdOut :", "\"Trace\"Should work")
	Debug("Test std logger on StdOut :", "\"Debug\" should work")
	Warning("Test std logger on StdOut :", "\"Warning\" should work")
	Error("Test std logger on StdOut :", "\"Error\" should work")
	SetLogLevel("Anything")
	t.Log("a new log level set on ", stdLogger.(StdLogger).logOutput.String() ," after a change :", stdLogger.GetLogLevel())
	Trace("Test std logger on StdOut :", "\"Trace\"Should work")
	Debug("Test std logger on StdOut :", "\"Debug\" should work")
	Warning("Test std logger on StdOut :", "\"Warning\" should work")
	Error("Test std logger on StdOut :", "\"Error\" should work")
}

func TestSetStdLogger_SetLogLevel_Stderr(t *testing.T) {
	stdLogger := SetStdLogger("error", "stderr")
	t.Log("log level set at init on", stdLogger.(StdLogger).logOutput.String() ,"at :", stdLogger.GetLogLevel(), "level")
	Trace("Test std logger on StdErr :", "should not work on \"Trace\"")
	Debug("Test std logger on StdErr :", "should not work on \"Debug\"")
	Warning("Test std logger on StdErr :", "should not work on \"Warning\"")
	Error("Test std logger on StdErr :", "\"Error\" should work")
	SetLogLevel("warning")
	t.Log("a new log level set on ", stdLogger.(StdLogger).logOutput.String() ," after a change :", stdLogger.GetLogLevel())
	Trace("Test std logger on StdErr :", "should not work on \"Trace\"")
	Debug("Test std logger on StdErr :", "should not work on \"Debug\"")
	Warning("Test std logger on StdErr :", "\"Warning\" should work")
	Error("Test std logger on StdErr :", "\"Error\" should work")
	SetLogLevel("debug")
	t.Log("a new log level set on ", stdLogger.(StdLogger).logOutput.String() ," after a change :", stdLogger.GetLogLevel())
	Trace("Test std logger on StdErr :", "should not work on \"Trace\"")
	Debug("Test std logger on StdErr :", "\"Debug\" should work")
	Warning("Test std logger on StdErr :", "\"Warning\" should work")
	Error("Test std logger on StdErr :", "\"Error\" should work")
	SetLogLevel("trace")
	t.Log("a new log level set on ", stdLogger.(StdLogger).logOutput.String() ," after a change :", stdLogger.GetLogLevel())
	Trace("Test std logger on StdErr :", "\"Trace\"Should work")
	Debug("Test std logger on StdErr :", "\"Debug\" should work")
	Warning("Test std logger on StdErr :", "\"Warning\" should work")
	Error("Test std logger on StdErr :", "\"Error\" should work")
	SetLogLevel("Anything")
	t.Log("a new log level set on ", stdLogger.(StdLogger).logOutput.String() ," after a change :", stdLogger.GetLogLevel())
	Trace("Test std logger on StdErr :", "\"Trace\"Should work")
	Debug("Test std logger on StdErr :", "\"Debug\" should work")
	Warning("Test std logger on StdErr :", "\"Warning\" should work")
	Error("Test std logger on StdErr :", "\"Error\" should work")
}
